{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Content","todayDate","Date","App","props","handleClick","bind","state","one","two","three","four","five","six","names","sort","a","b","Math","random","this","setState","className","style","fontSize","toDateString","toLocaleTimeString","Button","variant","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAKQA,EAAoBC,IAApBD,OAAQE,EAAYD,IAAZC,QAEZC,EAAY,IAAIC,KAsELC,E,kDAlEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,MAAQ,CAAEC,IAAK,GAAIC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,KAAM,GAAIC,IAAK,IAJpD,E,0DASb,IAAIC,EAAQ,CAAC,QAAQ,UAAW,QAAS,OAAQ,SAAS,OAEzDA,EAAMC,MAEJ,SAAcC,EAAGC,GACb,MAAO,GAAMC,KAAKC,YAGrBC,KAAKC,SAAS,CAAEb,IAAMM,EAAM,KAC5BM,KAAKC,SAAS,CAAEZ,IAAKK,EAAM,KAC3BM,KAAKC,SAAS,CAAEX,MAAOI,EAAM,KAC7BM,KAAKC,SAAS,CAAEV,KAAMG,EAAM,KAC5BM,KAAKC,SAAS,CAAET,KAAME,EAAM,KAC5BM,KAAKC,SAAS,CAAER,IAAKC,EAAM,O,+BAMnC,OAEI,kBAAC,IAAD,CAAQQ,UAAU,OAEhB,kBAACxB,EAAD,CAAQwB,UAAU,cAChB,uBAAGA,UAAU,gBAAb,8BAGF,kBAACtB,EAAD,CAASsB,UAAU,eACjB,kBAAC,IAAD,KACE,uBAAGC,MAAO,CAACC,SAAU,YAArB,iBAA+C,uBAAGF,UAAU,cAAcrB,EAAUwB,eAArC,IAAsDxB,EAAUyB,uBAEjH,kBAAC,IAAD,KACI,4BAAKN,KAAKb,MAAMC,KAChB,4BAAKY,KAAKb,MAAME,KAChB,4BAAKW,KAAKb,MAAMG,OAChB,4BAAKU,KAAKb,MAAMI,MAChB,4BAAKS,KAAKb,MAAMK,MAChB,4BAAKQ,KAAKb,MAAMM,OAKlB,6BACA,6BAEA,kBAACc,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAST,KAAKf,YAAYC,KAAKc,OAAzD,aAIJ,6BACA,kC,GA7DQU,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0a9215e6.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Layout, Card} from 'antd';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\n\nconst { Header, Content } = Layout;\n\nvar todayDate = new Date();\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n    this.state = { one: \"\", two: \"\", three: \"\", four: \"\", five: \"\", six: \"\",  };\n  }\n\n       handleClick(){\n\n        var names = [\"Eitan\",\"Karthik\", \"James\", \"Josh\", \"Reggie\",\"Nom\"];\n\n         names.sort(func);\n\n           function func(a, b) {\n               return 0.5 - Math.random();\n           }\n\n            this.setState({ one : names[0]});\n            this.setState({ two: names[1] });\n            this.setState({ three: names[2] });\n            this.setState({ four: names[3] });\n            this.setState({ five: names[4] });\n            this.setState({ six: names[5] });\n    }\n\n  render()\n  {\n\n    return(\n\n        <Layout className=\"App\">\n\n          <Header className=\"App-header\">\n            <p className=\"header-class\">Random StandUp Generator!</p>\n          </Header>\n\n          <Content className=\"App-content\">\n            <Card>\n              <p style={{fontSize: \"x-large\"}}>Today's Date: <b className=\"text-color\">{todayDate.toDateString()} {todayDate.toLocaleTimeString()}</b></p>\n\n            <Card>\n                <h3>{this.state.one}</h3>\n                <h3>{this.state.two}</h3>\n                <h3>{this.state.three}</h3>\n                <h3>{this.state.four}</h3>\n                <h3>{this.state.five}</h3>\n                <h3>{this.state.six}</h3>\n            </Card>\n\n            </Card>\n\n              <br></br>\n              <br></br>\n\n              <Button variant=\"success\" onClick={this.handleClick.bind(this)}>Generate</Button>\n\n          </Content>\n\n          <br></br>\n          <br></br>\n\n        </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}